stages:
  - build:rpm
  - build:dockerimage
  - test
  - publish
  - clean


before_script:
  - source gitlab-ci/export_branch.sh
  - echo "Exporting BRANCH=${BRANCH}"


.system_test_template: &system_test_template_definition
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - if [ "$CI_JOB_NAME" == "system_test_with_quarkdb" ]; then sudo ./eos-docker/scripts/start_services.sh -q -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}; else sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}; fi
    - docker exec -i eos-mgm-test /bin/bash -c 'eos vid enable krb5;'
    - docker exec -i eos-mgm-test eos-instance-test-ci
    - docker exec -i eos-client-test git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - docker exec -di eos-client-test /bin/bash -c 'mkdir /eos1/; mount -t fuse eosxd /eos1/'
    - docker exec -di eos-client-test /bin/bash -c 'mkdir /eos2/; mount -t fuse eosxd /eos2/'
    - docker exec -i -u eos-user eos-client-test /bin/bash -c 'cd /eos1/dockertest/; fusex-benchmark'
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported,\
    # until then just run the "ci" tests
    - if [ "$CI_PIPELINE_SOURCE" == "schedule" ]; then docker exec -i eos-mgm-test eos vid add gateway eos-client-test.eoscluster.cern.ch unix; docker exec -i eos-client-test env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci; else docker exec -i -u eos-user eos-client-test python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci; fi
    - docker exec -i eos-client-test env EOS_MGM_URL=root://eos-mgm-test.eoscluster.cern.ch eos fuse mount /eos_fuse
    - docker exec -i eos-client-test env EOS_MGM_URL=root://eos-mgm-test.eoscluster.cern.ch eos fuse mount /eos_fuse2
    - docker exec -i eos-client-test python /eosclient-tests/run.py --workdir="/eos_fuse/dockertest /eos_fuse2/dockertest" ci
    - sudo ./eos-docker/scripts/shutdown_services.sh


.ubuntu_system_test_template: &ubuntu_system_test_template_definition
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker pull gitlab-registry.cern.ch/dss/eos:ubuntu_client_${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    # Run the following tests only on the NS in QuarkDB
    - sudo ./eos-docker/scripts/start_services.sh -q -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID} -u gitlab-registry.cern.ch/dss/eos:ubuntu_client_${CI_COMMIT_TAG-$CI_PIPELINE_ID};
    - docker exec -i eos-mgm-test /bin/bash -c 'eos vid enable krb5'
    - docker exec -i eos-mgm-test eos-instance-test-ci
    - docker exec -i eos-client-test git clone https://gitlab.cern.ch/dss/eosclient-tests.git
    - docker exec -di eos-client-test /bin/bash -c 'mkdir /eos1/; mount -t fuse eosxd /eos1/'
    - docker exec -di eos-client-test /bin/bash -c 'mkdir /eos2/; mount -t fuse eosxd /eos2/'
    - docker exec -i -u eos-user eos-client-test /bin/bash -c 'cd /eos1/dockertest/; fusex-benchmark'
    # @todo(esindril): run "all" tests in schedule mode once these are properly supported,\
    # until then just run the "ci" tests
    - if [ "$CI_PIPELINE_SOURCE" == "schedule" ]; then docker exec -i eos-mgm-test eos vid add gateway eos-client-test.eoscluster.cern.ch unix; docker exec -i eos-client-test env EOS_FUSE_NO_ROOT_SQUASH=1 python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci; else docker exec -i -u eos-user eos-client-test python /eosclient-tests/run.py --workdir="/eos1/dockertest /eos2/dockertest" ci; fi
    - sudo ./eos-docker/scripts/shutdown_services.sh


.fedora_template: &fedora_template_definition
  stage: build:rpm
  script:
    - dnf install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar dnf-plugins-core ccache rpm-sign
    - git submodule update --init --recursive
    - mkdir build; cd build
    - cmake3 .. -DPACKAGEONLY=1; make srpm; cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/'${EOS_ARCH}'/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - dnf builddep --nogpgcheck -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache_fc.sh; else export CCACHE_DISABLE=1; fi
    # @todo: add this flag to have the build pass as it fails during boost header compilation - should be removed in the future ...
    - export CXXFLAGS="-Wno-parentheses"
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$BUILD_TYPE" == "tag" ]; then gpg2 --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir ${EOS_ARCH}_artifacts
    - cp -R build/SRPMS ${EOS_ARCH}_artifacts
    - cp -R build/RPMS ${EOS_ARCH}_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - ${EOS_ARCH}_artifacts/
  allow_failure: true


.ubuntu_template: &ubuntu_template_definition
  stage: build:rpm
  script:
    - apt-get update -y; apt-get install -y git cmake g++ debhelper devscripts equivs gdebi-core ccache
    - echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' master' >> /etc/apt/sources.list
    - echo -e '\ndeb http://storage-ci.web.cern.ch/storage-ci/debian/xrootd/ '${EOS_ARCH}' release' >> /etc/apt/sources.list
    - curl -sL http://storage-ci.web.cern.ch/storage-ci/storageci.key | apt-key add -
    - apt-get update -y
    - git submodule update --init --recursive
    - mk-build-deps --build-dep debian/control
    - gdebi -n eos-build-deps-depends*.deb
    - dch --create -v `./genversion.sh` --package eos --urgency low --distribution ${EOS_ARCH} -M "This package is built and released automatically. For important notices and releases subscribe to our mailing lists or visit our website."
    - if [[ $CI_COMMIT_TAG ]]; then export CCACHE_DISABLE=1; else source gitlab-ci/setup_ccache_deb.sh; fi
    - dpkg-buildpackage -b -us -uc -tc --buildinfo-option="-udeb_packages" --changes-option="-udeb_packages"
    - ccache -s
    - mkdir ${EOS_ARCH}
    - cp deb_packages/*.deb ${EOS_ARCH}
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  allow_failure: true


clone_docker:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y git
    - git clone https://gitlab.cern.ch/eos/eos-docker.git
  artifacts:
    expire_in: 1 day
    paths:
    - eos-docker/
  tags:
    - docker-fc_rawhide


build_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git yum-plugin-priorities tar ccache sl-release-scl
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-6/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache_slc6.sh; ccache --max-size=1.5G; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$BUILD_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir slc6_artifacts
    - cp -R build/SRPMS slc6_artifacts
    - cp -R build/RPMS slc6_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - slc6_artifacts/
  tags:
    - docker-slc6


build_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git yum-plugin-priorities ccache epel-release rpm-sign
    - git submodule update --init --recursive
    - mkdir build
    - cd build
    - cmake3 .. -DPACKAGEONLY=1
    - make srpm
    - cd ..
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - yum-builddep --nogpgcheck --setopt="cern*.exclude=xrootd*" -y build/SRPMS/*
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - if [ "$BUILD_TYPE" == "commit" ]; then source gitlab-ci/setup_ccache.sh; else export CCACHE_DISABLE=1; fi
    - rpmbuild --rebuild --with=server --define "_rpmdir build/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" build/SRPMS/*
    - ccache -s
    - if [ "$BUILD_TYPE" == "tag" ]; then gpg --allow-secret-key-import --import /keys/stci-debian-repo.sec; printf "" | setsid rpmsign --define='%_gpg_name stci@cern.ch' --define='%_signature gpg' --addsign build/RPMS/*.rpm; fi
    - mkdir cc7_artifacts
    - cp -R build/SRPMS cc7_artifacts
    - cp -R build/RPMS cc7_artifacts
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
    - ccache/
  artifacts:
    expire_in: 1 day
    paths:
    - cc7_artifacts/
  tags:
    - docker-cc7


build_fedora28:
  image: fedora:28
  <<: *fedora_template_definition
  variables:
    EOS_ARCH: fc-28
  tags:
    - docker-fc28


build_fedora_rawhide:
  image: registry.fedoraproject.org/fedora:rawhide
  <<: *fedora_template_definition
  variables:
    EOS_ARCH: fc-rawhide
  artifacts:
    expire_in: 1 day
    paths:
    - fc-rawhide_artifacts/
  tags:
    - docker-fc_rawhide


build_ubuntu_artful:
  image: ubuntu:artful
  <<: *ubuntu_template_definition
  variables:
    EOS_ARCH: artful
  artifacts:
    expire_in: 1 day
    paths:
    - artful/
  tags:
    - docker-ubuntu


build_ubuntu_bionic:
  image: ubuntu:bionic
  <<: *ubuntu_template_definition
  variables:
    EOS_ARCH: bionic
  artifacts:
    expire_in: 1 day
    paths:
    - bionic/
  tags:
    - docker-ubuntu


macosx_dmg:
  stage: build:rpm
  script:
    - git submodule update --init --recursive
    - mkdir build
    - mkdir install
    - cd build
    - cmake -DCLIENT=1 -DCMAKE_INSTALL_PREFIX=/usr/local -D Z_ROOT_DIR=/usr/local/opt/zlib/ -D OPENSSL_ROOT_DIR=/usr/local/opt/openssl/ -D NCURSES_ROOT_DIR=/usr/local/opt/ncurses/ -D ZMQ_ROOT_DIR=/usr/local/opt/zeromq/ -D XROOTD_ROOT_DIR=/usr/local/opt/xrootd/ -D UUID_ROOT_DIR=/usr/local/opt/ossp-uuid ..
    - make -j 4
    - make install DESTDIR=../install/
    - version=`../genversion.sh`
    - ../utils/eos-osx-package.sh $version ../install/
    - ccache -s
    - cd ..
    - mkdir osx_artifacts
    - cp build/*.dmg osx_artifacts
  artifacts:
    expire_in: 1 day
    paths:
    - osx_artifacts/
  tags:
    - macosx-shell


cc7_docker_image_commit:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/Dockerfile
  dependencies:
    - build_cc7
    - clone_docker
  only:
    - branches
  except:
    - beryl_aquamarine
    - tags


ubuntu_docker_image_commit:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:ubuntu_client_${CI_PIPELINE_ID}
    DOCKER_FILE: eos-docker/ubuntu_client/Dockerfile
    NO_CACHE: 1
  only:
    - dev
    - master
  allow_failure: true


cc7_docker_image_tag:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG}
    DOCKER_FILE: eos-docker/Dockerfile
    NO_CACHE: 1
  dependencies:
    - build_cc7
    - clone_docker
  only:
    - tags


ubuntu_docker_image_tag:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos:ubuntu_client_${CI_COMMIT_TAG}
    DOCKER_FILE: eos-docker/ubuntu_client/Dockerfile
    NO_CACHE: 1
  only:
    - tags
  allow_failure: true


prod_docker_image_tag:
  stage: build:dockerimage
  tags:
    - docker-image-build
  script:
    - ""
  variables:
    TO: gitlab-registry.cern.ch/dss/eos/eos-prod:${CI_COMMIT_TAG}
    DOCKER_FILE: eos-docker/projects/eos/Dockerfile
    NO_CACHE: 1
  dependencies:
    - build_cc7
    - clone_docker
  allow_failure: true
  only:
    - tags


unit_test:
  stage: test
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y yum-plugin-priorities createrepo
    - createrepo cc7_artifacts/
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - echo -e '[eos-artifacts]\nname=EOS artifacts\nbaseurl=file://'${PWD}'/cc7_artifacts\ngpgcheck=0\nenabled=1\npriority=1' >> /etc/yum.repos.d/eos-artifacts.repo
    - yum install --nogpg -y eos-client eos-server eos-test
    - eos-unit-tests || true
    - eos-fst-unit-tests || true
  cache:
    key: "$CI_BUILD_NAME-$CI_BUILD_REF_NAME"
    paths:
    - ccache/
  dependencies:
    - build_cc7
  tags:
    - docker-cc7


namespace_unit_test:
  stage: test
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y yum-plugin-priorities createrepo
    - createrepo cc7_artifacts/
    - echo -e '[eos-depend]\nname=EOS dependencies\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/eos/'${BRANCH}'-depend/el-7/x86_64/\ngpgcheck=0\nenabled=1\nexclude=xrootd*\npriority=4\n' >> /etc/yum.repos.d/eos-depend.repo
    - echo -e '[eos-artifacts]\nname=EOS artifacts\nbaseurl=file://'${PWD}'/cc7_artifacts\ngpgcheck=0\nenabled=1\npriority=1' >> /etc/yum.repos.d/eos-artifacts.repo
    - echo -e '[quarkdb]\nname=QuarkDB\nbaseurl=http://storage-ci.web.cern.ch/storage-ci/quarkdb/tag/el7/x86_64/\ngpgcheck=0\nenabled=1\npriority=4\n' >> /etc/yum.repos.d/quarkdb.repo
    - yum install --nogpg -y eos-client eos-server eos-test quarkdb
    - export EOS_QUARKDB_HOSTPORT=localhost:9999
    - export EOS_QUARKDB_PASSWD=password_must_be_atleast_32_characters
    - quarkdb-create --path /var/lib/quarkdb/node-1 --clusterID ns-test --nodes $EOS_QUARKDB_HOSTPORT
    - mkdir /var/log/quarkdb
    - chown -R daemon:daemon /var/lib/quarkdb /var/log/quarkdb
    - echo redis.password $EOS_QUARKDB_PASSWD >> /etc/xrd.cf.quarkdb
    - (xrootd -c /etc/xrd.cf.quarkdb -l /var/log/quarkdb/xrdlog.quarkdb -Rdaemon &) ; sleep 3
    - eos-ns-quarkdb-tests || true
  cache:
    key: "$CI_BUILD_NAME-$CI_BUILD_REF_NAME"
    paths:
      - ccache/
  dependencies:
    - build_cc7
  tags:
    - docker-cc7


system_test:
  stage: test
  <<: *system_test_template_definition
  tags:
    - shell-with-docker
  allow_failure: true
  dependencies:
    - clone_docker
  retry: 1


ubuntu_system_test:
  stage: test
  <<: *ubuntu_system_test_template_definition
  tags:
    - ubuntu
    - shell-with-docker
  allow_failure: true
  dependencies:
    - clone_docker
  retry: 1


system_test_with_quarkdb:
  stage: test
  <<: *system_test_template_definition
  tags:
    - xrootd-shell
  allow_failure: true
  dependencies:
    - clone_docker
  retry: 1


stress_test:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker exec -i eos-mgm-test eos chmod 2777 /eos/dockertest
    - docker exec -i eos-mgm-test hammer-runner.py --strict-exit-code 1 --gitlab --url eos-mgm-test.eoscluster.cern.ch//eos/dockertest/hammer/ --protocols xroot --threads 1 2 10 100 --operations write stat read delete --runs 3 --nfiles 10000
    - sudo ./eos-docker/scripts/shutdown_services.sh
  tags:
    - eos-stress
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1


extstorage_test:
  stage: test
  script:
    - sudo ./eos-docker/scripts/shutdown_services.sh
    - ./eos-docker/scripts/remove_unused_images.sh
    - docker pull gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - sudo ./eos-docker/scripts/start_services.sh -i gitlab-registry.cern.ch/dss/eos:${CI_COMMIT_TAG-$CI_PIPELINE_ID}
    - docker exec -i eos-mgm-test eos chmod 2777 /eos/dockertest
    - docker exec -i eos-mgm-test eos-extstorage-test eos-mgm-test:1094 --verbose
    - sudo ./eos-docker/scripts/shutdown_services.sh
  tags:
    - eos-extstorage
  dependencies:
    - clone_docker
  allow_failure: true
  retry: 1


publish_koji_cc7:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client
    - yum install -y koji --disablerepo=extras
    - mkdir ~/.koji
    - echo -e '[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False\n' >> ~/.koji/config
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - koji build eos7 cc7_artifacts/SRPMS/*.src.rpm
  tags:
    - docker-cc7
  dependencies:
    - build_cc7
  only:
    - tags


publish_koji_slc6:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client
    - yum install -y koji --disablerepo=extras
    - mkdir ~/.koji
    - echo -e '[koji]\nserver = https://kojihub.cern.ch/kojihub\nweburl = https://koji.cern.ch/\ntopurl = https://koji.cern.ch/kojifiles\nkrb_canon_host = no\nkrb_rdns = False\n' >> ~/.koji/config
    - kinit stci@CERN.CH -k -t /stci.krb5/stci.keytab
    - koji build eos6 slc6_artifacts/SRPMS/*.src.rpm
  tags:
    - docker-slc6
  dependencies:
    - build_slc6
  only:
    - tags


rpm_testing_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag/testing"; else BUILD_TYPE="commit"; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /eos/project/s/storage-ci/www/eos
  tags:
    - docker-cc7
  only:
    - master
    - dev
    - tags
  retry: 2


rpm_stable_artifacts:
  stage: publish
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sudo sssd-client createrepo
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE="tag"; else echo "This only works for tags"; exit 0; fi
    - ./gitlab-ci/store_artifacts.sh ${BRANCH} ${BUILD_TYPE} /mnt/eos_repositories/eos
    - sudo -u stci -H ./gitlab-ci/store_stable_artifacts.sh ${BRANCH} /eos/project/s/storage-ci/www/eos ${CI_COMMIT_TAG}
    - echo ${CI_COMMIT_TAG} | sudo -u stci tee /eos/project/s/storage-ci/www/eos/${BRANCH}/tag/latest_version
  tags:
    - docker-cc7
  when: manual


debian_artifacts:
  stage: publish
  image: ubuntu:artful
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - sudo -u stci -H gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - if [[ $CI_COMMIT_TAG ]]; then BUILD_TYPE=tag; else BUILD_TYPE=commit; fi
    - sudo -u stci -H ./gitlab-ci/store_artifacts_debian.sh /eos/project/s/storage-ci/www/debian/eos/${BRANCH} ${BUILD_TYPE}
  tags:
    - docker-ubuntu
  dependencies:
    - build_ubuntu_artful
    - build_ubuntu_bionic
  allow_failure: true
  retry: 2
  only:
    - master
    - dev
    - tags


debian_artifacts_volume:
  stage: publish
  image: ubuntu:artful
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd
    - mkdir /home/stci
    - gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - ./gitlab-ci/store_artifacts_debian.sh /mnt/eos_repositories/debian/eos/${BRANCH} tag
  tags:
    - docker-cc7
  dependencies:
    - build_ubuntu_artful
    - build_ubuntu_bionic
  only:
    - tags


clean_rpm_artifacts:
  stage: clean
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y sssd-client sudo createrepo
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts.sh
  tags:
    - docker-cc7
  allow_failure: true
  only:
    - triggers
    - schedules


clean_debian_artifacts:
  stage: clean
  image: ubuntu:artful
  script:
    - apt-get update
    - apt-get install -y sudo apt-utils sssd
    - mkdir /home/stci
    - chown -R stci:def-cg /home/stci
    - chmod -R 700 /home/stci
    - sudo -u stci -H gpg --homedir /home/stci/ --allow-secret-key-import --import /keys/stci-debian-repo.sec
    - sudo -u stci -H ./gitlab-ci/remove_old_artifacts_debian.sh
  tags:
    - docker-ubuntu
  allow_failure: true
  only:
    - schedules


periodic_coverity:
  stage: build:rpm
  script:
    - rm -f CMakeCache.txt
    - git submodule update --init --recursive; mkdir build; cd build; scl enable "cmake3 .. -DPACKAGEONLY=1"; make srpm
    - sudo yum-builddep --nogpgcheck -y --setopt="cern*.exclude=xrootd*" --setopt="eos-depend.exclude=protobuf3*" SRPMS/*
    - rm -rf ./*; scl enable devtoolset-6 "cmake3 .."
    - cov-build --dir cov-int make -j 4
    - tar czvf eos-metrics.tgz cov-int
    - curl --form token="`cat /home/gitlab-runner/.coverity_token`" --form email=project-eos-commits@cern.ch --form file=@eos-metrics.tgz --form version="`../genversion.sh`" --form description="Periodic Gitlab build" https://scan.coverity.com/builds?project=cern-eos%2Feos
  tags:
    - coverity
  allow_failure: true
  when: manual


cppcheck_sonar:
  stage: build:rpm
  script:
    - rm -f CMakeCache.txt
    - git submodule update --init --recursive; mkdir build; cd build; scl enable "cmake3 .. -DPACKAGEONLY=1"; make srpm; cd ..;
    - sudo yum-builddep --nogpgcheck -y --setopt="cern*.exclude=xrootd*" --setopt="eos-depend.exclude=protobuf3*" build/SRPMS/*
    - cppcheck -j 4 -v --enable=all --inline-suppr --xml --xml-version=2 -i common/fmt -i fst/layout/gf-complete -i fst/layout/jerasure -i common/sqlite -i namespace/ns_quarkdb/qclient common/ fst/ mgm/ console/ fuse/ fusex/ namespace/ mq/ 2> cppcheck-report.xml
    - sonar-scanner -Dsonar.cxx.cppcheck.reportPath=cppcheck-report.xml -Dsonar.projectVersion="`./genversion.sh`" -Dsonar.sources=common/,fst/,mgm/,console/,fuse/,namespace/,mq/
  tags:
    - coverity
  allow_failure: true
  when: manual


#-------------------------------------------------------------------------------
# Manually triggered builds
#-------------------------------------------------------------------------------

eos_nginx_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-slc6
  when: manual
  environment:
    name: nginx-slc6-prod


eos_nginx_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd nginx
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-cc7
  when: manual
  environment:
    name: nginx-cc7-prod


eos_apmon_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git tar sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - mkdir -p rpmbuild/{BUILD,BUILDROT,RPMS,SOURCES,SPECS,SRPMS}
    - cp eos-apmon-*.tar.gz rpmbuild/SOURCES
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -bs eos-apmon.spec
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/SRPM
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/SRPMS/*.src.rpm $STORAGE_PATH
  tags:
    - docker-slc6
  when: manual
  environment:
    name: apmon-slc6-prod


eos_apmon_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ cmake3 make rpm-build which git sssd-client sudo createrepo
    - cd ApMon
    - ./maketar.sh
    - rpmbuild --define "_source_filedigest_algorithm md5" --define "_binary_filedigest_algorithm md5" --define "_topdir ./rpmbuild" -ts eos-apmon-*.tar.gz
    - yum-builddep --nogpgcheck -y rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - rpmbuild --rebuild --define "_rpmdir rpmbuild/RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" rpmbuild/SRPMS/eos-apmon-*.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f rpmbuild/RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-cc7
  when: manual
  environment:
    name: apmon-cc7-prod


eos_microhttpd_slc6:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/slc6-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git tar sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-6/x86_64
    - groupadd --gid 2766 def-cg
    - useradd -u 102230 -g def-cg stci
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-fc_rawhide
  when: manual


eos_microhttpd_cc7:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y gcc-c++ make rpm-build which git sssd-client sudo createrepo
    - cd microhttpd
    - ./makesrpm.sh
    - yum-builddep --nogpgcheck -y *.src.rpm
    - mkdir RPMS
    - rpmbuild --rebuild --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" *.src.rpm
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}-depend/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-cc7
  when: manual


eos_docs:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y make python-sphinx sssd-client sudo which git
    - cd doc
    - export PYTHONPATH=`pwd`/_themes/
    - make html
    - sudo -u stci -H bash -c "rm -rf /eos/project/e/eos/www/docs/*"
    - sudo -u stci -H cp -R _build/html/* /eos/project/e/eos/www/docs/
  tags:
    - docker-cc7
  when: manual


eos_repopackage:
  stage: build:rpm
  image: gitlab-registry.cern.ch/linuxsupport/cc7-base
  script:
    - yum install --nogpg -y rpm-build sssd-client sudo createrepo
    - mkdir build
    - cd build
    - rpmbuild --bb --define "_rpmdir RPMS/" --define "_build_name_fmt %%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm" ../elrepopackage.spec
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-7/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
    - STORAGE_PATH=/eos/project/s/storage-ci/www/eos/${BRANCH}/tag/el-6/x86_64
    - sudo -u stci -H mkdir -p $STORAGE_PATH
    - sudo -u stci -H cp -f RPMS/*.rpm $STORAGE_PATH
    - sudo -u stci -H createrepo --update -q $STORAGE_PATH
  tags:
    - docker-cc7
  when: manual
